name: Deploy Miner

on:
  workflow_dispatch:
  push:
    branches: [ main, dev ]

jobs:
  # ────────────────────────── 1. pack & deploy ─────────────────────────────
  deploy:
    runs-on: ubuntu-latest

    # ▸▸▸  explicitly expose only the secrets you want to pack  ▸▸▸
    env:
      ENV_NAME:                                 ${{ secrets.ENV_NAME }}
      AWS_EC2_HOST_ADDRESS:                     ${{ secrets.AWS_EC2_HOST_ADDRESS }}
      AWS_EC2_PEM_CHATBOT_SA_B64:               ${{ secrets.AWS_EC2_PEM_CHATBOT_SA_B64 }}
      AWS_EC2_REGION:                           ${{ secrets.AWS_EC2_REGION }}
      AWS_EC2_USERNAME:                         ${{ secrets.AWS_EC2_USERNAME }}
      AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER: ${{ secrets.AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER }}
      AWS_IAM_WHATSAPP_MINER_ACCESS_KEY:        ${{ secrets.AWS_IAM_WHATSAPP_MINER_ACCESS_KEY }}
      AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID:     ${{ secrets.AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID }}
      DOCKER_CONTAINER_NAME_WHATSAPP_MINER:     ${{ secrets.DOCKER_CONTAINER_NAME_WHATSAPP_MINER }}
      DOCKER_IMAGE_NAME_WHATSAPP_MINER:         ${{ secrets.DOCKER_IMAGE_NAME_WHATSAPP_MINER }}
      GREEN_API_INSTANCE_API_TOKEN:             ${{ secrets.GREEN_API_INSTANCE_API_TOKEN }}
      GREEN_API_INSTANCE_ID:                    ${{ secrets.GREEN_API_INSTANCE_ID }}
      SUPABASE_DATABASE_CONNECTION_STRING:      ${{ secrets.SUPABASE_DATABASE_CONNECTION_STRING }}
      SUPABASE_DATABASE_PASSWORD:               ${{ secrets.SUPABASE_DATABASE_PASSWORD }}
      MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS:     ${{ secrets.MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS }}
      GROQ_API_KEY:                             ${{ secrets.GROQ_API_KEY }}

    steps:
      # ────── (a) checkout ──────
      - name: Checkout repository
        uses: actions/checkout@v4

      # ────── (b) setup a real Python ──────
      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # ────── (c) jq for JSON manipulation ──────
      - name: Install jq
        run: sudo apt-get update -qq && sudo apt-get install -y jq

      # ────── (d) pack secrets → single JSON → base64 ──────
      - name: Pack secrets into Base64 blob
        id: pack
        shell: bash
        run: |
          # build one JSON object from exactly those env keys
          jq -n \
            --arg a "$ENV_NAME" \
            --arg b "$AWS_EC2_HOST_ADDRESS" \
            --arg c "$AWS_EC2_PEM_CHATBOT_SA_B64" \
            --arg d "$AWS_EC2_REGION" \
            --arg e "$AWS_EC2_USERNAME" \
            --arg f "$AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER" \
            --arg g "$AWS_IAM_WHATSAPP_MINER_ACCESS_KEY" \
            --arg h "$AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID" \
            --arg i "$DOCKER_CONTAINER_NAME_WHATSAPP_MINER" \
            --arg j "$DOCKER_IMAGE_NAME_WHATSAPP_MINER" \
            --arg k "$GREEN_API_INSTANCE_API_TOKEN" \
            --arg l "$GREEN_API_INSTANCE_ID" \
            --arg m "$SUPABASE_DATABASE_CONNECTION_STRING" \
            --arg n "$SUPABASE_DATABASE_PASSWORD" \
            --arg o "$MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS" \
            --arg p "$GROQ_API_KEY" \
            '{ 
              ENV_NAME:                                $a,
              AWS_EC2_HOST_ADDRESS:                    $b,
              AWS_EC2_PEM_CHATBOT_SA_B64:             $c,
              AWS_EC2_REGION:                          $d,
              AWS_EC2_USERNAME:                        $e,
              AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER: $f,
              AWS_IAM_WHATSAPP_MINER_ACCESS_KEY:       $g,
              AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID:    $h,
              DOCKER_CONTAINER_NAME_WHATSAPP_MINER:    $i,
              DOCKER_IMAGE_NAME_WHATSAPP_MINER:        $j,
              GREEN_API_INSTANCE_API_TOKEN:            $k,
              GREEN_API_INSTANCE_ID:                   $l,
              SUPABASE_DATABASE_CONNECTION_STRING:     $m,
              SUPABASE_DATABASE_PASSWORD:              $n,
              MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS:    $o,
              GROQ_API_KEY:                            $p
            }' \
          | base64 -w0 \
          > secrets.b64

          B64=$(<secrets.b64)
          echo "::add-mask::$B64"
          echo "blob=$B64" >>"$GITHUB_OUTPUT"

      # ────── (e) verify secrets bundle ──────
      - name: Verify secrets bundle
        run: |
          chmod +x verify_secrets.sh
          ./verify_secrets.sh --secrets-b64 "${{ steps.pack.outputs.blob }}"

      # ────── (f) make your scripts runnable ──────
      - name: Make deploy scripts executable
        run: chmod +x docker_*.sh

      # ────── (g) tiny runtime Python deps for your scripts ──────
      - name: Tiny Python runtime deps
        run: pip install -q alembic psycopg2-binary

      # ────── (h) fire off the real deploy, passing the blob ──────
      - name: Run deployment
        run: |
          ./docker_deploy.sh \
            --secrets-b64 "${{ steps.pack.outputs.blob }}"
