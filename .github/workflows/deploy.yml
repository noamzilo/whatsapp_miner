name: Deploy Miner

on:
  workflow_dispatch:
  push:
    branches: [ main, dev ]

##############################################################################
# 1.  Decide deployment environment name (dev â†”ï¸Ž prd)
##############################################################################
jobs:
  set-env:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.pick.outputs.env }}
    steps:
      - id: pick
        shell: bash
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [[ "$BRANCH" == main ]]; then
            echo 'env=prd' >>"$GITHUB_OUTPUT"
          else
            echo 'env=dev'  >>"$GITHUB_OUTPUT"
          fi

##############################################################################
# 2.  Pack listed secrets â†’ one base-64 blob and call docker_deploy.sh
##############################################################################
  deploy:
    needs: set-env
    runs-on: ubuntu-latest
    environment: ${{ needs.set-env.outputs.env_name }}

    # â€£â€£â€£ explicit list of repo secrets (no wild-cards)
    env:
      AWS_EC2_HOST_ADDRESS:                       ${{ secrets.AWS_EC2_HOST_ADDRESS }}
      AWS_EC2_PEM_CHATBOT_SA_B64:                 ${{ secrets.AWS_EC2_PEM_CHATBOT_SA_B64 }}
      AWS_EC2_REGION:                             ${{ secrets.AWS_EC2_REGION }}
      AWS_EC2_USERNAME:                           ${{ secrets.AWS_EC2_USERNAME }}
      AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER:   ${{ secrets.AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER }}
      AWS_IAM_WHATSAPP_MINER_ACCESS_KEY:          ${{ secrets.AWS_IAM_WHATSAPP_MINER_ACCESS_KEY }}
      AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID:       ${{ secrets.AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID }}
      DOCKER_CONTAINER_NAME_WHATSAPP_MINER:       ${{ secrets.DOCKER_CONTAINER_NAME_WHATSAPP_MINER }}
      DOCKER_IMAGE_NAME_WHATSAPP_MINER:           ${{ secrets.DOCKER_IMAGE_NAME_WHATSAPP_MINER }}
      GREEN_API_INSTANCE_API_TOKEN:               ${{ secrets.GREEN_API_INSTANCE_API_TOKEN }}
      GREEN_API_INSTANCE_ID:                      ${{ secrets.GREEN_API_INSTANCE_ID }}
      SUPABASE_DATABASE_CONNECTION_STRING:        ${{ secrets.SUPABASE_DATABASE_CONNECTION_STRING }}
      SUPABASE_DATABASE_PASSWORD:                 ${{ secrets.SUPABASE_DATABASE_PASSWORD }}
      MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS:       ${{ secrets.MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS }}
      GROQ_API_KEY:                               ${{ secrets.GROQ_API_KEY }}

    steps:
    # (a) checkout code ------------------------------------------------------
    - uses: actions/checkout@v4

    # (b) jq for JSON packing ------------------------------------------------
    - name: Install jq
      run: sudo apt-get update -qq && sudo apt-get install -y jq

    # (c) pack all env-vars above â†’ base-64 blob -----------------------------
    - name: Pack secrets into base64 blob
      id: pack
      shell: bash
      run: |
        # Keys we exported in the env: block (keep in sync!)
        keys=(
          AWS_EC2_HOST_ADDRESS
          AWS_EC2_PEM_CHATBOT_SA_B64
          AWS_EC2_REGION
          AWS_EC2_USERNAME
          AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER
          AWS_IAM_WHATSAPP_MINER_ACCESS_KEY
          AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID
          DOCKER_CONTAINER_NAME_WHATSAPP_MINER
          DOCKER_IMAGE_NAME_WHATSAPP_MINER
          GREEN_API_INSTANCE_API_TOKEN
          GREEN_API_INSTANCE_ID
          SUPABASE_DATABASE_CONNECTION_STRING
          SUPABASE_DATABASE_PASSWORD
          MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS
          GROQ_API_KEY
        )

        # Build JSON in one jq invocation (no syntax errors!)
        json=$(jq -n \
          --arg AWS_EC2_HOST_ADDRESS "$AWS_EC2_HOST_ADDRESS" \
          --arg AWS_EC2_PEM_CHATBOT_SA_B64 "$AWS_EC2_PEM_CHATBOT_SA_B64" \
          --arg AWS_EC2_REGION "$AWS_EC2_REGION" \
          --arg AWS_EC2_USERNAME "$AWS_EC2_USERNAME" \
          --arg AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER "$AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER" \
          --arg AWS_IAM_WHATSAPP_MINER_ACCESS_KEY "$AWS_IAM_WHATSAPP_MINER_ACCESS_KEY" \
          --arg AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID "$AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID" \
          --arg DOCKER_CONTAINER_NAME_WHATSAPP_MINER "$DOCKER_CONTAINER_NAME_WHATSAPP_MINER" \
          --arg DOCKER_IMAGE_NAME_WHATSAPP_MINER "$DOCKER_IMAGE_NAME_WHATSAPP_MINER" \
          --arg GREEN_API_INSTANCE_API_TOKEN "$GREEN_API_INSTANCE_API_TOKEN" \
          --arg GREEN_API_INSTANCE_ID "$GREEN_API_INSTANCE_ID" \
          --arg SUPABASE_DATABASE_CONNECTION_STRING "$SUPABASE_DATABASE_CONNECTION_STRING" \
          --arg SUPABASE_DATABASE_PASSWORD "$SUPABASE_DATABASE_PASSWORD" \
          --arg MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS "$MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS" \
          --arg GROQ_API_KEY "$GROQ_API_KEY" \
          '{
            AWS_EC2_HOST_ADDRESS:                       $AWS_EC2_HOST_ADDRESS,
            AWS_EC2_PEM_CHATBOT_SA_B64:                 $AWS_EC2_PEM_CHATBOT_SA_B64,
            AWS_EC2_REGION:                             $AWS_EC2_REGION,
            AWS_EC2_USERNAME:                           $AWS_EC2_USERNAME,
            AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER:   $AWS_EC2_WORKING_DIRECTORY_WHATSAPP_MINER,
            AWS_IAM_WHATSAPP_MINER_ACCESS_KEY:          $AWS_IAM_WHATSAPP_MINER_ACCESS_KEY,
            AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID:       $AWS_IAM_WHATSAPP_MINER_ACCESS_KEY_ID,
            DOCKER_CONTAINER_NAME_WHATSAPP_MINER:       $DOCKER_CONTAINER_NAME_WHATSAPP_MINER,
            DOCKER_IMAGE_NAME_WHATSAPP_MINER:           $DOCKER_IMAGE_NAME_WHATSAPP_MINER,
            GREEN_API_INSTANCE_API_TOKEN:               $GREEN_API_INSTANCE_API_TOKEN,
            GREEN_API_INSTANCE_ID:                      $GREEN_API_INSTANCE_ID,
            SUPABASE_DATABASE_CONNECTION_STRING:        $SUPABASE_DATABASE_CONNECTION_STRING,
            SUPABASE_DATABASE_PASSWORD:                 $SUPABASE_DATABASE_PASSWORD,
            MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS:       $MESSAGE_CLASSIFIER_RUN_EVERY_SECONDS,
            GROQ_API_KEY:                               $GROQ_API_KEY
          }')

        blob=$(printf '%s' "$json" | base64 -w0)
        echo "::add-mask::$blob"                 # hide in logs
        echo "blob=$blob" >>"$GITHUB_OUTPUT"
        echo "ðŸ”’ Packed $((${#blob})) bytes of secrets"

    # (d) make deploy helper scripts runnable -------------------------------
    - name: Make deploy scripts executable
      run: chmod +x docker_*.sh

    # (e) tiny python deps ---------------------------------------------------
    - name: Tiny runtime python deps
      run: pip install -q alembic psycopg2-binary

    # (f) hand-off to your existing script ----------------------------------
    - name: Run docker_deploy.sh
      run: |
        ./docker_deploy.sh \
          --env "${{ needs.set-env.outputs.env_name }}" \
          --secrets-b64 "${{ steps.pack.outputs.blob }}"
